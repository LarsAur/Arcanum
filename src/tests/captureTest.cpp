#include <tests/test.hpp>

#include <board.hpp>

using namespace Arcanum;

static void playAllMovesAndCheckCaptures(Board& board, uint32_t depth, bool* failed)
{
    // Find captures and queen promotions
    board.getLegalCaptureMoves();
    uint8_t numNoisyMoves = board.getNumLegalMoves();

    Move* legalMoves = board.getLegalMoves();
    uint8_t numLegalMoves = board.getNumLegalMoves();

    if((numLegalMoves == 0) || (depth == 0))
    {
        return;
    }

    board.generateCaptureInfo();

    uint8_t numCapturesAndPromotions = 0;
    if(!board.isChecked())
    {
        // Count the number of captures and promotions in the legal moves
        for(int i = 0; i < numLegalMoves; i++)
        {
            const Move& move = legalMoves[i];
            if((move.isCapture() || move.isPromotion()) && !move.isUnderPromotion())
            {
                numCapturesAndPromotions++;
            }
        }
    }
    else
    {
        // If in check all moves must be considered
        numCapturesAndPromotions = numLegalMoves;
    }

    if(numCapturesAndPromotions != numNoisyMoves)
    {
        *failed = true;
        FAIL("Mismatch in number of captures and promotions. Expected " << (int)numCapturesAndPromotions << " but got " << (int)numNoisyMoves << " in position " << board.fen())
        return;
    }

    for(int i = 0; i < numLegalMoves; i++)
    {
        Board newBoard = Board(board);
        newBoard.performMove(legalMoves[i]);

        if(!*failed)
        {
            playAllMovesAndCheckCaptures(newBoard, depth - 1, failed);
        }
        else
        {
            return; // Exit early on failure
        }
    }
}

// This test goes through a number of positions recursively and checks that
// the number of captures and promotions generated by getLegalCaptureMoves and getNumLegalMoves are consistent
// If in check, getLegalCaptureMoves should return all legal moves
bool Test::runCaptureTest()
{
    bool failed = false;

    // Test initial position
    Board boardStart = Board("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");
    playAllMovesAndCheckCaptures(boardStart, 5, &failed);
    if(failed)
    {
        FAIL("Failed initial position")
        return false;
    }
    else
    {
        SUCCESS("Completed initial position")
    }

    // Test position with enpassant and black to move
    Board boardEnpassant = Board("rnbqkbnr/pppp1ppp/8/8/4PpP1/8/PPPP3P/RNBQKBNR b KQkq g3 0 3");
    playAllMovesAndCheckCaptures(boardEnpassant, 5, &failed);
    if(failed)
    {
        FAIL("Failed position with enpassant")
        return false;
    }
    else
    {
        SUCCESS("Completed position with enpassant")
    }

    // Test position with promotions for both colors
    Board boardPromote = Board("rnbqkbnr/ppppp2P/8/8/8/2P5/PP1pK1PP/RNBQ1BNR b kq - 1 8");
    playAllMovesAndCheckCaptures(boardPromote, 5, &failed);
    if(failed)
    {
        FAIL("Failed position with promotions")
        return false;
    }
    else
    {
        SUCCESS("Completed position with promotions")
    }

    return true;
}